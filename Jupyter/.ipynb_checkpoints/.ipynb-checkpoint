{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-1.8.0-openjdk-amd64\"\n",
    "os.environ[\"SPARK_HOME\"] = \"/home/hadoop/work/spark-3.2.0-bin-hadoop2.7\"\n",
    "os.environ[\"PYSPARK_PYTHON\"] = \"/usr/bin/python3.8\"\n",
    "os.environ[\"PYSPARK_DRIVER_PYTHON\"] = \"/usr/bin/python3.8\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install -q findspark\n",
    "import findspark\n",
    "findspark.init()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "21/10/31 11:09:29 WARN util.Utils: Your hostname, hadoop-Lenovo-G50-80 resolves to a loopback address: 127.0.1.1; using 192.168.189.28 instead (on interface wlp3s0)\n",
      "21/10/31 11:09:29 WARN util.Utils: Set SPARK_LOCAL_IP if you need to bind to another address\n",
      "Setting default log level to \"WARN\".\n",
      "To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n",
      "21/10/31 11:09:30 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "\n",
    "spark = SparkSession.builder\\\n",
    "        .master(\"local\")\\\n",
    "        .appName(\"Word Count RDD\")\\\n",
    "        .config('spark.ui.port', '4050')\\\n",
    "        .getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pyspark.sql.dataframe.DataFrame'>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------------------------------------------------------------------------------------------------+\n",
      "|value                                                                                                    |\n",
      "+---------------------------------------------------------------------------------------------------------+\n",
      "|it was the best of times it was the worst of times it was the age of wisdom it was the age of foolishness|\n",
      "+---------------------------------------------------------------------------------------------------------+\n",
      "\n",
      "+-----------+-----+\n",
      "|word       |count|\n",
      "+-----------+-----+\n",
      "|the        |4    |\n",
      "|of         |4    |\n",
      "|was        |4    |\n",
      "|it         |4    |\n",
      "|times      |2    |\n",
      "|age        |2    |\n",
      "|worst      |1    |\n",
      "|wisdom     |1    |\n",
      "|foolishness|1    |\n",
      "|best       |1    |\n",
      "+-----------+-----+\n",
      "\n",
      "Word Count DataFrame Spark SQL\n",
      "+-----------+-----+\n",
      "|       word|count|\n",
      "+-----------+-----+\n",
      "|        the|    4|\n",
      "|         of|    4|\n",
      "|        was|    4|\n",
      "|         it|    4|\n",
      "|      times|    2|\n",
      "|        age|    2|\n",
      "|      worst|    1|\n",
      "|     wisdom|    1|\n",
      "|foolishness|    1|\n",
      "|       best|    1|\n",
      "+-----------+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import  split,explode,col,count\n",
    "\n",
    "sc = spark.sparkContext\n",
    "df = spark.read.text(\"word_cnt.txt\") # return DataFrame object\n",
    "print(type(df))\n",
    "df.show(5, truncate=False)\n",
    "\n",
    "dfwords = df.withColumn('words', split(col('value'), ' ')) \\\n",
    "    .withColumn('word', explode(col('words'))) \\\n",
    "    .drop('value', 'words') \\\n",
    "    .groupby('word') \\\n",
    "    .agg(count('word').alias('count')) \\\n",
    "    .orderBy('count', ascending=False) \\\n",
    "    .show(10, truncate=False)\n",
    "\n",
    "print(\"Word Count DataFrame Spark SQL\")\n",
    "sqllines = df.createOrReplaceTempView('lines')\n",
    "\n",
    "spark.sql(\"\"\"select word, count(word) count from\n",
    " (select explode(split(value,' '))  word from lines) words group by word order by count desc\"\"\").show(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pyspark.rdd.RDD'>\n",
      "['it was the best of times it was the worst of times it was the age of wisdom it was the age of foolishness']\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql.functions import split, col, explode, count\n",
    "\n",
    "from pyspark import SparkConf, SparkContext\n",
    "\n",
    "conf = SparkConf().setAppName(\" Word Count RDD \")\n",
    "sc = SparkContext.getOrCreate(conf=conf)\n",
    "\n",
    "text = sc.textFile('word_cnt.txt') # return RDD object\n",
    "print(type(text))\n",
    "print(text.collect())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['it', 'was', 'the', 'best', 'of', 'times', 'it', 'was', 'the', 'worst', 'of', 'times', 'it', 'was', 'the', 'age', 'of', 'wisdom', 'it', 'was', 'the', 'age', 'of', 'foolishness']\n"
     ]
    }
   ],
   "source": [
    "rdd2 = text.flatMap(lambda x: x.split(' '))\n",
    "print(rdd2.collect())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('it', 1), ('was', 1), ('the', 1), ('best', 1), ('of', 1), ('times', 1), ('it', 1), ('was', 1), ('the', 1), ('worst', 1), ('of', 1), ('times', 1), ('it', 1), ('was', 1), ('the', 1), ('age', 1), ('of', 1), ('wisdom', 1), ('it', 1), ('was', 1), ('the', 1), ('age', 1), ('of', 1), ('foolishness', 1)]\n"
     ]
    }
   ],
   "source": [
    "rdd3 = rdd2.map(lambda x: (x, 1))\n",
    "print(rdd3.collect())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('it', 1), ('was', 1), ('the', 1), ('best', 1), ('of', 1), ('times', 1), ('it', 1), ('was', 1), ('the', 1), ('worst', 1), ('of', 1), ('times', 1), ('it', 1), ('was', 1), ('the', 1), ('age', 1), ('of', 1), ('wisdom', 1), ('it', 1), ('was', 1), ('the', 1), ('age', 1), ('of', 1), ('foolishness', 1)]\n",
      "[('it', 4), ('was', 4), ('the', 4), ('best', 1), ('of', 4), ('times', 2), ('worst', 1), ('age', 2), ('wisdom', 1), ('foolishness', 1)]\n",
      "Word Count in 1 line \n",
      "[('it', 4), ('was', 4), ('the', 4), ('best', 1), ('of', 4), ('times', 2), ('worst', 1), ('age', 2), ('wisdom', 1), ('foolishness', 1)]\n"
     ]
    }
   ],
   "source": [
    "rdd3 = rdd2.map(lambda x: (x, 1))\n",
    "print(rdd3.collect())\n",
    "\n",
    "rdd4 = rdd3.reduceByKey(lambda x, y: x + y)\n",
    "print(rdd4.collect())\n",
    "\n",
    "# all operation in 1 line\n",
    "print(\"Word Count in 1 line \")\n",
    "\n",
    "counts = text.flatMap(lambda line: line.split(\" \")) \\\n",
    "    .map(lambda word: (word, 1)) \\\n",
    "    .reduceByKey(lambda x, y: x + y)\n",
    "\n",
    "print(counts.collect())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
